FROM centos:8
COPY s6-overlay-amd64.tar.gz /tmp

RUN tar xzf /tmp/s6-overlay-amd64.tar.gz -C / --exclude="./bin" && \
    tar xzf /tmp/s6-overlay-amd64.tar.gz -C /usr ./bin

# https://superuser.com/questions/959380/how-do-i-install-generate-all-locales-on-fedora
# This may not be necessary anymore because Fedora 30, unlike CentOS 7, has
# glibc subpackages like glibc-langpack-en.
RUN rm /etc/rpm/macros.image-language-conf
RUN echo 'LANG="en_US.UTF-8"' > /etc/locale.conf
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8
ENV PYTHONUNBUFFERED=0
ENV DJANGO_SETTINGS_MODULE=pulpcore.app.settings
ENV PULP_SETTINGS=/etc/pulp/settings.py
ENV _BUILDAH_STARTED_IN_USERNS=""
ENV BUILDAH_ISOLATION=chroot

# glibc-langpack-en is needed to provide the en_US.UTF-8 locale, which Pulp
# seems to need.
#
# The last 5 lines (before clean) are needed until python3-createrepo_c gets an
# RPM upgrade to 0.16.2. Until then, we install & build it from PyPI.
RUN dnf -y install dnf-plugins-core && \
    dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm && \
    dnf config-manager --set-enabled powertools && \
    dnf -y module enable postgresql:12 && \
    dnf -y update && \
    dnf -y install python3 && \
    dnf -y install openssl && \
    dnf -y install wget git && \
    dnf -y install python3-psycopg2 && \
    dnf -y install glibc-langpack-en && \
    dnf -y install python3-cryptography && \
    dnf -y install python3-libmodulemd && \
    dnf -y install python3-libcomps && \
    dnf -y install postgresql && \
    dnf -y install postgresql-contrib && \
    dnf -y install postgresql-server && \
    dnf -y install nginx && \
    dnf -y install redis && \
    dnf -y install python3-setuptools && \
    dnf -y install buildah --exclude container-selinux && \
    dnf -y install libmodulemd-devel && \
    dnf -y install libcomps-devel && \
    dnf -y install zchunk-devel && \
    dnf -y install ninja-build && \
    dnf -y install 'dnf-command(builddep)' && \
    dnf -y builddep createrepo_c && \
    dnf -y install podman && \
    dnf -y install sudo && \
    dnf clean all

RUN sed 's|^#mount_program|mount_program|g' -i /etc/containers/storage.conf

RUN mkdir -p /etc/nginx/pulp \
             /etc/pulp \
             /etc/services.d/nginx \
             /etc/services.d/postgresql \
             /etc/services.d/pulpcore-api \
             /etc/services.d/pulpcore-content \
             /etc/services.d/pulpcore-resource-manager \
             /etc/services.d/pulpcore-worker@1 \
             /etc/services.d/pulpcore-worker@2 \
             /etc/services.d/new-pulpcore-worker@1 \
             /etc/services.d/new-pulpcore-worker@2 \
             /etc/services.d/redis \
             /var/lib/pgsql \
             /var/lib/pulp/assets \
             /var/lib/pulp/media \
             /var/run/pulpcore-resource-manager \
             /var/run/pulpcore-worker-1 \
             /var/run/pulpcore-worker-2 \
             /var/run/new-pulpcore-worker-1 \
             /var/run/new-pulpcore-worker-2

RUN pip3 install --upgrade pip

RUN echo "/var/lib/pgsql true postgres 0600 0750" >> /etc/fix-attrs.d/postgres

COPY assets/pulpcore-content.run /etc/services.d/pulpcore-content/run
COPY assets/postgres.run /etc/services.d/postgresql/run
COPY assets/redis.run /etc/services.d/redis/run
COPY assets/pulpcore-worker.prep /etc/cont-init.d/pulpcore-worker
COPY assets/pulpcore-resource-manager.run /etc/services.d/pulpcore-resource-manager/run
COPY assets/pulpcore-worker@1.run /etc/services.d/pulpcore-worker@1/run
COPY assets/pulpcore-worker@2.run /etc/services.d/pulpcore-worker@2/run
COPY assets/new-pulpcore-worker@1.run /etc/services.d/new-pulpcore-worker@1/run
COPY assets/new-pulpcore-worker@2.run /etc/services.d/new-pulpcore-worker@2/run
COPY assets/pulpcore-api.prep /etc/cont-init.d/pulpcore-api
COPY assets/pulpcore-api.run /etc/services.d/pulpcore-api/run
COPY assets/000-postgres.prep /etc/cont-init.d/000-postgres
COPY assets/zzz-postgres.prep /etc/cont-init.d/zzz-postgres
COPY assets/nginx.conf /etc/nginx/nginx.conf
COPY assets/nginx.run /etc/services.d/nginx/run

ENTRYPOINT ["/init"]

EXPOSE 80
